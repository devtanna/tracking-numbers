import os

os.environ["CODE_GENERATING"] = "true"

from tracking_numbers.helpers.spec import iter_courier_specs  # noqa:E402
from tracking_numbers.helpers.spec import iter_definitions  # noqa:E402


import_statements = [
    "import re",
    "",
    "from tracking_numbers.checksum_validator import Mod10",
    "from tracking_numbers.checksum_validator import Mod7",
    "from tracking_numbers.checksum_validator import Mod37_36",
    "from tracking_numbers.checksum_validator import S10",
    "from tracking_numbers.checksum_validator import SumProductWithWeightsAndModulo",
    "from tracking_numbers.definition import AdditionalValidation",
    "from tracking_numbers.definition import TrackingNumberDefinition",
    "from tracking_numbers.serial_number import DefaultSerialNumberParser",
    "from tracking_numbers.serial_number import PrependIf",
    "from tracking_numbers.serial_number import UPSSerialNumberParser",
    "from tracking_numbers.types import Courier",
    "from tracking_numbers.types import Product",
    "from tracking_numbers.value_matcher import ExactValueMatcher",
    "from tracking_numbers.value_matcher import RegexValueMatcher",
]


def main():
    """Generates the python code for all the tracking number definitions.
    This is used by the public API of the library in the call to get_tracking_number().
    The reason we use codegen here is so that we don't have to ship the JSON files around,
    which have a lot of additional metadata, test cases, etc. and are slower to parse at
    startup.
    """

    with open("tracking_numbers/_generated.py", "w") as wf:
        wf.write("# DO NOT EDIT - Generated by codegen.py\n")
        wf.write("\n")
        for import_stmt in import_statements:
            wf.write(f"{import_stmt}\n")

        wf.write("\n\n")
        wf.write("DEFINITIONS = [\n")
        for courier_spec in iter_courier_specs():
            for definition, _ in iter_definitions(courier_spec):
                wf.write(f"  {repr(definition)},\n")

        wf.write("]\n")


if __name__ == "__main__":
    main()
